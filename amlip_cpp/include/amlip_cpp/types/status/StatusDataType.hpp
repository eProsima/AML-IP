// Copyright 2022 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file StatusDataType.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen and refactored by a proto-intelligent try-hard human.
 */

#ifndef AMLIPCPP__SRC_CPP_TYPES_STATUSDATATYPE_HPP
#define AMLIPCPP__SRC_CPP_TYPES_STATUSDATATYPE_HPP

#include <cpp_utils/macros/custom_enumeration.hpp>

#include <amlip_cpp/types/id/AmlipIdDataType.hpp>
#include <amlip_cpp/types/InterfaceDataType.hpp>

namespace eprosima {
namespace amlip {
namespace types {

// TODO do this in a more elegant way
/*!
 * @brief This class represents the enumeration NodeKind defined by the user in the IDL file.
 * @ingroup STATUS
 */
// ENUMERATION_BUILDER(
//     NodeKind
//     , undetermined
//     , discovery
//     , agent
//     , main
//     , computing
//     , status
//     , meta
// );
static_assert( COUNT_ARGUMENTS(undetermined, discovery, agent, main, computing, status,
        meta), "Empty Enumerations are not allowed."); enum class NodeKind
{
    undetermined, discovery, agent, main, computing, status, meta
};
const std::array<std::string,
        COUNT_ARGUMENTS(undetermined, discovery, agent, main, computing, status,
        meta)> names_NodeKind = { APPLY_MACRO_FOR_EACH(STRINGIFY_WITH_COMMA, undetermined, discovery, agent,
                                          main, computing, status, meta) };
inline const std::string& to_string(
        const NodeKind& e)
{
    return names_NodeKind[static_cast<int>(e)];
}

inline NodeKind from_string_NodeKind(
        const std::string& s)
{
    for (int i = 0; i < COUNT_ARGUMENTS(undetermined, discovery, agent, main, computing, status, meta); i++)
    {
        if (names_NodeKind[i] == s)
        {
            return static_cast<NodeKind>(i);
        }
    }
    throw eprosima::utils::InitializationException( STR_ENTRY << "Not correct name " << s << " for Enum " <<
                        STRINGIFY(NodeKind) << ".");
}

inline std::ostream& operator <<(
        std::ostream& os,
        const NodeKind& e)
{
    os << to_string(e); return os;
}

constexpr const unsigned int N_VALUES_NodeKind = COUNT_ARGUMENTS(undetermined, discovery, agent, main, computing,
                status, meta);

/*!
 * @brief This class represents the enumeration StateKind defined by the user in the IDL file.
 * @ingroup STATUS
 */
// ENUMERATION_BUILDER(
//     StateKind
//     , unknown
//     , running
//     , stopped
//     , dropped
// );
static_assert( COUNT_ARGUMENTS(unknown, running, stopped, dropped), "Empty Enumerations are not allowed.");
enum class StateKind
{
    unknown, running, stopped, dropped
};
const std::array<std::string,
        COUNT_ARGUMENTS(unknown, running, stopped, dropped)> names_StateKind = { APPLY_MACRO_FOR_EACH(
                                                                                     STRINGIFY_WITH_COMMA, unknown,
                                                                                     running, stopped, dropped) };
inline const std::string& to_string(
        const StateKind& e)
{
    return names_StateKind[static_cast<int>(e)];
}

inline StateKind from_string_StateKind(
        const std::string& s)
{
    for (int i = 0; i < COUNT_ARGUMENTS(unknown, running, stopped, dropped); i++)
    {
        if (names_StateKind[i] == s)
        {
            return static_cast<StateKind>(i);
        }
    }
    throw eprosima::utils::InitializationException( STR_ENTRY << "Not correct name " << s << " for Enum " <<
                        STRINGIFY(StateKind) << ".");
}

inline std::ostream& operator <<(
        std::ostream& os,
        const StateKind& e)
{
    os << to_string(e); return os;
}

constexpr const unsigned int N_VALUES_StateKind = COUNT_ARGUMENTS(unknown, running, stopped, dropped);

/*!
 * @brief This class represents the structure StatusDataType defined by the user in the IDL file.
 * @ingroup STATUS
 */
class StatusDataType : public InterfaceDataType
{
public:

    /*!
     * @brief Default constructor.
     */
    StatusDataType();

    /*!
     * @brief Default constructor.
     */
    StatusDataType(
            AmlipIdDataType id,
            NodeKind node_kind,
            StateKind state);

    virtual ~StatusDataType() = default;

    /*!
     * @brief Comparison operator.
     * @param x StatusDataType object to compare.
     */
    bool operator ==(
            const StatusDataType& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StatusDataType object to compare.
     */
    bool operator !=(
            const StatusDataType& x) const;

    AmlipIdDataType id() const noexcept;

    NodeKind node_kind() const noexcept;

    StateKind state() const noexcept;

    bool is_defined() const noexcept;

    //! Overload parent \c to_string method
    std::string to_string() const noexcept;

    /////
    // InterfaceDataType methods

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(
            eprosima::fastcdr::Cdr& cdr) const override;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(
            eprosima::fastcdr::Cdr& cdr) override;

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize_key(
            eprosima::fastcdr::Cdr& cdr) const override;

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t get_max_cdr_serialized_size(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    static size_t get_cdr_serialized_size(
            const StatusDataType& data,
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t get_key_max_cdr_serialized_size(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    static bool is_key_defined();

    /**
     * @brief Whether the type is bounded
     */
    static bool is_bounded();

    /**
     * @brief Whether the type is plain
     */
    static bool is_plain();

    /**
     * @brief Construct an empty sample in the memory allocated
     *
     * @pre The type must be plain
     *
     * @param memory already allocated memory for the new data
     *
     * @return true if the construction was successful, false otherwise
     */
    static bool construct_sample(
            void* memory);

    /**
     * @brief Name of the Data Type. This name will be used as the DDS type name.
     *
     * @warning this method must be overriden in child class.
     */
    static std::string type_name();

protected:

    AmlipIdDataType id_;

    NodeKind node_kind_;

    StateKind state_;

    static const char* DATA_TYPE_NAME_; // "status"
};

//! \c StatusDataType to stream serializator
std::ostream& operator <<(
        std::ostream& os,
        const StatusDataType& st);

} /* namespace types */
} /* namespace amlip */
} /* namespace eprosima */

#endif // AMLIPCPP__SRC_CPP_TYPES_STATUSDATATYPE_HPP
