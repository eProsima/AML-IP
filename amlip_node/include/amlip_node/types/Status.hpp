// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file status.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen and refactored by a proto-intelligent try-hard human.
 */

#ifndef AMLIP__SRC_CPP_AMLIPTYPES_STATUS_HPP
#define AMLIP__SRC_CPP_AMLIPTYPES_STATUS_HPP

#include <amlip_node/types/AmlipId.hpp>
#include <amlip_node/types/InterfaceDataType.hpp>

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace eprosima {
namespace amlip {
namespace types {

/*!
 * @brief This class represents the enumeration NodeKind defined by the user in the IDL file.
 * @ingroup STATUS
 */
enum NodeKind : uint32_t
{
    UNDETERMINED,
    DISCOVERY,
    AGENT,
    MAIN,
    COMPUTATIONAL,
    EDGE,
    STATUS
};
/*!
 * @brief This class represents the enumeration StatusKind defined by the user in the IDL file.
 * @ingroup STATUS
 */
enum StatusKind : uint32_t
{
    UNKNOWN,
    RUNNING,
    DISABLED
};
/*!
 * @brief This class represents the structure Status defined by the user in the IDL file.
 * @ingroup STATUS
 */
class Status : InterfaceDataType
{
public:

    /*!
     * @brief Default constructor.
     */
    Status();

    /*!
     * @brief Default constructor.
     */
    Status(
        AmlipId id,
        NodeKind node_kind,
        StatusKind status);

    /*!
     * @brief Default destructor.
     */
    ~Status();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Status that will be copied.
     */
    Status(
            const Status& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Status that will be copied.
     */
    Status(
            Status&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Status that will be copied.
     */
    Status& operator =(
            const Status& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Status that will be copied.
     */
    Status& operator =(
            Status&& x);

    /*!
     * @brief Comparison operator.
     * @param x Status object to compare.
     */
    bool operator ==(
            const Status& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Status object to compare.
     */
    bool operator !=(
            const Status& x) const;

    /*!
     * @brief This function copies the value in member id
     * @param _id New value to be copied in member id
     */
    void id(
            const AmlipId& _id);

    /*!
     * @brief This function moves the value in member id
     * @param _id New value to be moved in member id
     */
    void id(
            AmlipId&& _id);

    /*!
     * @brief This function returns a constant reference to member id
     * @return Constant reference to member id
     */
    const AmlipId& id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    AmlipId& id();
    /*!
     * @brief This function sets a value in member node_kind
     * @param _node_kind New value for member node_kind
     */
    void node_kind(
            NodeKind _node_kind);

    /*!
     * @brief This function returns the value of member node_kind
     * @return Value of member node_kind
     */
    NodeKind node_kind() const;

    /*!
     * @brief This function returns a reference to member node_kind
     * @return Reference to member node_kind
     */
    NodeKind& node_kind();

    /*!
     * @brief This function sets a value in member status
     * @param _status New value for member status
     */
    void status(
            StatusKind _status);

    /*!
     * @brief This function returns the value of member status
     * @return Value of member status
     */
    StatusKind status() const;

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    StatusKind& status();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    static size_t getCdrSerializedSize(
            const Status& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

    static bool is_bounded();

    static bool is_plain();

    static bool construct_sample(
            void* memory);

    static const char* type_name();

protected:

    AmlipId id_;
    NodeKind node_kind_;
    StatusKind status_;
};

} /* namespace types */
} /* namespace amlip */
} /* namespace eprosima */

#endif // AMLIP__SRC_CPP_AMLIPTYPES_STATUS_HPP