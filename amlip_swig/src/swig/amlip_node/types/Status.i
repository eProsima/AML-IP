// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Status.i
 * This header file contains the SWIG interface of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

// Import parent class
%import(module="amlip_node") "amlip_node/types/InterfaceDataType.hpp";

// SWIG helper modules
%include "typemaps.i"
%include "std_string.i"
%include "std_vector.i"
%include "std_array.i"
%include "std_map.i"

// Assignemt operators are ignored, as there is no such thing in Python.
// Trying to export them issues a warning
%ignore *::operator=;

// Definition of internal types

typedef short int16_t;
typedef int int32_t;
typedef long int64_t;

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long uint64_t;

%include "AmlipId.i"

%{
#include <amlip_node/types/Status.hpp>
%}

////////////////////////////////////////////////////////
// Binding for class Status
////////////////////////////////////////////////////////

// Ignore overloaded methods that have no application on Python
// Otherwise they will issue a warning
%ignore Status::Status(Status&&);

// Overloaded getter methods shadow each other and are equivalent in python
// Avoid a warning ignoring all but one
// Const accesors produced constant enums instead of arrays/dictionaries when used

// id()
%ignore Status::id(AmlipId&&);
%ignore Status::id() const;
%rename("%s") Status::id() const;

// node_kind()
%ignore Status::node_kind(NodeKind&&);
%ignore Status::node_kind();
%rename("%s") Status::node_kind() const;

// status()
%ignore Status::status(StatusKind);
%ignore Status::status() const;
%rename("%s") Status::status() const;

// Include the class interfaces
%include <amlip_node/types/Status.hpp>
